{"version":3,"file":"static/js/678.34168663.chunk.js","mappings":"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","sources":["TalentContext/reducer.ts","TalentContext/TalentContext.tsx","TalentContext/encoding.ts","TalentContext/selectors.ts","config.ts","TreeContext.ts","hooks/useTooltipPos.ts","components/Tooltip.tsx","components/TalentTooltip.tsx","components/Arrow.tsx","components/Talent.tsx","components/ClearButton.tsx","components/TalentTree.tsx","views/KlassTrees.tsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import { State, Action } from \"./types\";\r\n\r\nexport const makeReducer = (initialState: State) => (\r\n  state: State,\r\n  action: Action,\r\n): State => {\r\n  switch (action.type) {\r\n    case \"POINT_SPENT\": {\r\n      const { tree, talent } = action;\r\n\r\n      return {\r\n        ...state,\r\n        [tree]: {\r\n          ...state[tree],\r\n          [talent]: state[tree][talent] + 1,\r\n        },\r\n      };\r\n    }\r\n\r\n    case \"POINT_UNSPENT\": {\r\n      const { tree, talent } = action;\r\n\r\n      return {\r\n        ...state,\r\n        [tree]: {\r\n          ...state[tree],\r\n          [talent]: state[tree][talent] - 1,\r\n        },\r\n      };\r\n    }\r\n\r\n    case \"TREE_RESET\": {\r\n      const { tree } = action;\r\n\r\n      return {\r\n        ...state,\r\n        [tree]: {\r\n          ...initialState[tree],\r\n        },\r\n      };\r\n    }\r\n\r\n    case \"ALL_RESET\": {\r\n      return {\r\n        ...initialState,\r\n      };\r\n    }\r\n\r\n    case \"STATE_RESTORED\": {\r\n      const { newState } = action;\r\n\r\n      return {\r\n        ...newState,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\n\r\nimport { State, TalentData } from \"./types\";\r\nimport {\r\n  isTalentUnlocked,\r\n  isTalentMaxed,\r\n  getPointsLeft,\r\n  getTalentRank,\r\n  getTalentDependents,\r\n} from \"./selectors\";\r\nimport { makeReducer } from \"./reducer\";\r\n\r\nconst createInitialState = (data: TalentData) =>\r\n  Object.entries(data).reduce<State>((prev, [treeName, tree]) => {\r\n    prev[treeName] = Object.keys(tree.talents).reduce<Record<string, number>>(\r\n      (prev, talentName) => {\r\n        prev[talentName] = 0;\r\n        return prev;\r\n      },\r\n      {},\r\n    );\r\n    return prev;\r\n  }, {});\r\n\r\nconst TalentContext = createContext<{\r\n  state: State;\r\n  data: TalentData;\r\n  spendPoint: (tree: string, talent: string) => void;\r\n  unspendPoint: (tree: string, talent: string) => void;\r\n  resetTree: (tree: string) => void;\r\n  resetAll: () => void;\r\n  restoreState: (newState: State) => void;\r\n} | null>(null);\r\n\r\nexport const createTalentProvider = (data: TalentData): React.FC => {\r\n  const initialState = createInitialState(data);\r\n\r\n  return ({ children }) => {\r\n    const [state, dispatch] = useReducer(\r\n      makeReducer(initialState),\r\n      initialState,\r\n    );\r\n\r\n    const spendPoint = (tree: string, talent: string) => {\r\n      const pointsLeft = getPointsLeft(state);\r\n      const unlocked = isTalentUnlocked(state, data, tree, talent);\r\n      const maxed = isTalentMaxed(state, data, tree, talent);\r\n\r\n      if (unlocked && !maxed && pointsLeft > 0) {\r\n        dispatch({ type: \"POINT_SPENT\", tree, talent });\r\n      }\r\n    };\r\n\r\n    const unspendPoint = (tree: string, talent: string) => {\r\n      const rank = getTalentRank(state, tree, talent);\r\n      const dependents = getTalentDependents(state, data, tree, talent);\r\n\r\n      if (dependents.length === 0 && rank > 0) {\r\n        dispatch({\r\n          type: \"POINT_UNSPENT\",\r\n          tree,\r\n          talent,\r\n        });\r\n      }\r\n    };\r\n\r\n    const resetTree = (tree: string) => {\r\n      dispatch({ type: \"TREE_RESET\", tree });\r\n    };\r\n\r\n    const resetAll = () => {\r\n      dispatch({ type: \"ALL_RESET\" });\r\n    };\r\n\r\n    const restoreState = (newState: State) => {\r\n      dispatch({ type: \"STATE_RESTORED\", newState });\r\n    };\r\n\r\n    const value = {\r\n      state,\r\n      data,\r\n      spendPoint,\r\n      unspendPoint,\r\n      resetTree,\r\n      resetAll,\r\n      restoreState,\r\n    };\r\n\r\n    return (\r\n      <TalentContext.Provider value={value}>{children}</TalentContext.Provider>\r\n    );\r\n  };\r\n};\r\n\r\nexport const useTalentContext = () => {\r\n  const context = useContext(TalentContext);\r\n\r\n  if (context === null) {\r\n    throw new Error(\r\n      \"Components using useTalentContext must be children of TalentContextProvider\",\r\n    );\r\n  }\r\n  return context;\r\n};\r\n","import { State, TalentData } from \"./types\";\r\nimport { encodeState, decodeState, trimEnd } from \"../utils\";\r\n\r\nconst SPLIT_SYMBOL = \"-\";\r\n\r\nconst getTreeStateFromHash = (talentNames: string[], hash: string = \"\") => {\r\n  const ranks = decodeState(hash);\r\n  return talentNames.reduce<Record<string, number>>((prev, name, i) => {\r\n    prev[name] = ranks[i] || 0;\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\nexport const getStateFromHash = (data: TalentData, hash: string = \"\") => {\r\n  const hashes = hash.split(SPLIT_SYMBOL);\r\n  return Object.entries(data).reduce<State>((prev, [treeName, treeData], i) => {\r\n    prev[treeName] = getTreeStateFromHash(\r\n      Object.keys(treeData.talents),\r\n      hashes[i],\r\n    );\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\nexport const getHashFromState = (state: State) => {\r\n  const hashes = Object.values(state).reduce<string[]>((prev, ranks) => {\r\n    const treeHash = encodeState(Object.values(ranks));\r\n    prev.push(treeHash || \"0\");\r\n    return prev;\r\n  }, []);\r\n  return trimEnd(\"0\", hashes).join(SPLIT_SYMBOL);\r\n};\r\n","import { State, TalentData } from \"./types\";\r\nimport { config } from \"../config\";\r\n\r\nexport const getTalentRank = (state: State, tree: string, talent: string) => {\r\n  return state[tree][talent];\r\n};\r\n\r\nexport const getTalentData = (\r\n  data: TalentData,\r\n  tree: string,\r\n  talent: string,\r\n) => {\r\n  return data[tree].talents[talent];\r\n};\r\n\r\nconst getTreeTalents = (data: TalentData, tree: string) => {\r\n  return data[tree].talents;\r\n};\r\n\r\nexport const getTreeData = (data: TalentData, tree: string) => {\r\n  return data[tree];\r\n};\r\n\r\nexport const getTreePointsSpent = (state: State, tree: string) => {\r\n  const ranks = Object.values(state[tree]);\r\n  return ranks.reduce((prev, rank) => {\r\n    return prev + rank;\r\n  }, 0);\r\n};\r\n\r\nexport const getPointsSpent = (state: State) => {\r\n  const treeNames = Object.keys(state);\r\n  return treeNames.reduce((prev, treeName) => {\r\n    return prev + getTreePointsSpent(state, treeName);\r\n  }, 0);\r\n};\r\n\r\nexport const getPointsLeft = (state: State) => {\r\n  return config.TOTAL_POINTS - getPointsSpent(state);\r\n};\r\n\r\nexport const isTalentMaxed = (\r\n  state: State,\r\n  data: TalentData,\r\n  tree: string,\r\n  talent: string,\r\n) => {\r\n  const talentRank = getTalentRank(state, tree, talent);\r\n  const talentData = getTalentData(data, tree, talent);\r\n  return talentRank === talentData.maxRank;\r\n};\r\n\r\nexport const areReqPointsMet = (\r\n  state: State,\r\n  data: TalentData,\r\n  tree: string,\r\n  talent: string,\r\n) => {\r\n  const treePointsSpent = getTreePointsSpent(state, tree);\r\n  const talentData = getTalentData(data, tree, talent);\r\n  return treePointsSpent >= talentData.reqPoints;\r\n};\r\n\r\nexport const isPrereqMet = (\r\n  state: State,\r\n  data: TalentData,\r\n  tree: string,\r\n  talent: string,\r\n) => {\r\n  const talentData = getTalentData(data, tree, talent);\r\n  if (talentData.prereq) {\r\n    return isTalentMaxed(state, data, tree, talentData.prereq);\r\n  }\r\n  // TODO: returns true if there is no prereq, could cause problems\r\n  return true;\r\n};\r\n\r\n// todo: doesn't consider if there are any remaining points\r\nexport const isTalentUnlocked = (\r\n  state: State,\r\n  data: TalentData,\r\n  tree: string,\r\n  talent: string,\r\n) => {\r\n  const prereqMet = isPrereqMet(state, data, tree, talent);\r\n  const reqPointsMet = areReqPointsMet(state, data, tree, talent);\r\n  return prereqMet && reqPointsMet;\r\n};\r\n\r\nconst getBasePoints = (\r\n  state: State,\r\n  data: TalentData,\r\n  tree: string,\r\n  talent: string,\r\n) => {\r\n  const { reqPoints } = getTalentData(data, tree, talent);\r\n  // get talents which require less than or equal to these points,\r\n  // sum their ranks\r\n  return Object.entries(getTreeTalents(data, tree)).reduce(\r\n    (prev, [talentName, talentData]) => {\r\n      if (talentData.reqPoints <= reqPoints) {\r\n        return prev + getTalentRank(state, tree, talentName);\r\n      }\r\n      return prev;\r\n    },\r\n    0,\r\n  );\r\n};\r\n\r\nexport const getTalentDependents = (\r\n  state: State,\r\n  data: TalentData,\r\n  tree: string,\r\n  talent: string,\r\n) => {\r\n  const basePoints = getBasePoints(state, data, tree, talent);\r\n  const treeTalents = getTreeTalents(data, tree);\r\n\r\n  return Object.entries(treeTalents).reduce<string[]>(\r\n    (prev, [talentName, talentData]) => {\r\n      const rank = getTalentRank(state, tree, talentName);\r\n      const { prereq } = talentData;\r\n\r\n      if (talentData.reqPoints === basePoints && rank > 0) {\r\n        // if the talent has req equal to base points spent, therefore 1 less point and it would be illegal\r\n        prev.push(talentName);\r\n      } else if (prereq === talent && rank > 0) {\r\n        prev.push(talentName);\r\n      }\r\n      return prev;\r\n    },\r\n    [],\r\n  );\r\n};\r\n","export const config = {\r\n  TOTAL_POINTS: 51,\r\n  FIRST_POINT_LEVEL: 10,\r\n};\r\n","import { createContext, useContext } from \"react\";\r\n\r\nexport const TreeContext = createContext<string | null>(null);\r\n\r\nexport const useTreeContext = () => {\r\n  const context = useContext(TreeContext);\r\n\r\n  if (context === null) {\r\n    throw new Error(\r\n      \"Components using useTreeContext must be children of TreeContext.Provider\"\r\n    );\r\n  }\r\n\r\n  return context;\r\n};\r\n","import { useState, useRef, useLayoutEffect } from \"react\";\r\n\r\n// TODO: should be hidden by default\r\nconst DEFAULT_POS = \"topRight\";\r\n\r\nexport type TooltipPos = \"topRight\" | \"topLeft\" | \"bottomRight\" | \"bottomLeft\";\r\n\r\nexport const useTooltipPos = <T extends HTMLElement, U extends HTMLElement>(\r\n  // Optional dependencies for the positioning effect.\r\n  // Useful if the content of the tooltip can change while it's visible\r\n  ...deps: any[]\r\n) => {\r\n  const anchorRef = useRef<T | null>(null);\r\n  const tooltipRef = useRef<U | null>(null);\r\n  const [tooltipPos, setTooltipPos] = useState<TooltipPos>(DEFAULT_POS);\r\n  const [tooltipVisible, setTooltipVisible] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!tooltipVisible || !tooltipRef.current || !anchorRef.current) {\r\n      return;\r\n    }\r\n    const getPosition = (): TooltipPos => {\r\n      if (!tooltipRef.current || !anchorRef.current) {\r\n        return DEFAULT_POS;\r\n      }\r\n      const viewportHeight = window.innerHeight;\r\n      const viewportWidth = window.innerWidth;\r\n      const anchorRect = anchorRef.current.getBoundingClientRect();\r\n      const tooltipRect = tooltipRef.current.getBoundingClientRect();\r\n\r\n      const fitsTop = anchorRect.top >= tooltipRect.height;\r\n      const fitsRight = viewportWidth - anchorRect.right >= tooltipRect.width;\r\n      const fitsBottom =\r\n        viewportHeight - anchorRect.bottom >= tooltipRect.height;\r\n      const fitsLeft = anchorRect.left >= tooltipRect.width;\r\n\r\n      if (fitsTop && fitsRight) {\r\n        return \"topRight\";\r\n      } else if (fitsTop && fitsLeft) {\r\n        return \"topLeft\";\r\n      } else if (fitsBottom && fitsRight) {\r\n        return \"bottomRight\";\r\n      } else if (fitsBottom && fitsLeft) {\r\n        return \"bottomLeft\";\r\n      } else {\r\n        return DEFAULT_POS;\r\n      }\r\n    };\r\n\r\n    setTooltipPos(getPosition());\r\n  }, [tooltipVisible, ...deps]);\r\n\r\n  const showTooltip = () => setTooltipVisible(true);\r\n  const hideTooltip = () => setTooltipVisible(false);\r\n\r\n  // TODO: consider memoizing this?\r\n  return {\r\n    anchorProps: {\r\n      ref: anchorRef,\r\n      onMouseEnter: showTooltip,\r\n      onMouseLeave: hideTooltip,\r\n    },\r\n    tooltipProps: { ref: tooltipRef, position: tooltipPos },\r\n    tooltipVisible,\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Tooltip.css\";\r\nimport { TooltipPos } from \"../hooks/useTooltipPos\";\r\nimport tooltipBackground from \"../assets/tooltip.png\";\r\n\r\ninterface Props extends React.ComponentPropsWithRef<\"div\"> {\r\n  position: TooltipPos;\r\n  contentClassName?: string;\r\n}\r\n\r\nexport const Tooltip = React.forwardRef<HTMLDivElement, Props>(\r\n  ({ position, contentClassName = \"\", children }, ref) => {\r\n    return (\r\n      <div className={`Tooltip-container Tooltip-container--${position}`}>\r\n        <div ref={ref} className=\"Tooltip\">\r\n          <div className=\"Tooltip-backgroundContainer\">\r\n            <div\r\n              className=\"Tooltip-background--topLeft\"\r\n              style={{ backgroundImage: `url(${tooltipBackground})` }}\r\n            />\r\n            <div\r\n              className=\"Tooltip-background--topRight\"\r\n              style={{ backgroundImage: `url(${tooltipBackground})` }}\r\n            />\r\n            <div\r\n              className=\"Tooltip-background--bottomLeft\"\r\n              style={{ backgroundImage: `url(${tooltipBackground})` }}\r\n            />\r\n            <div\r\n              className=\"Tooltip-background--bottomRight\"\r\n              style={{ backgroundImage: `url(${tooltipBackground})` }}\r\n            />\r\n          </div>\r\n          <div className={`Tooltip-content ${contentClassName}`}>\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { Tooltip } from \"./Tooltip\";\r\n\r\nimport \"./TalentTooltip.css\";\r\nimport { useTalentContext } from \"../TalentContext\";\r\nimport {\r\n  getTalentRank,\r\n  areReqPointsMet,\r\n  isPrereqMet,\r\n  isTalentUnlocked,\r\n  getTalentData,\r\n  getPointsLeft,\r\n} from \"../TalentContext/selectors\";\r\n\r\ninterface Props extends React.ComponentPropsWithoutRef<typeof Tooltip> {\r\n  name: string;\r\n  tree: string;\r\n}\r\n\r\nexport const TalentTooltip = React.forwardRef<HTMLDivElement, Props>(\r\n  ({ name, tree, ...rest }, ref) => {\r\n    const { state, data } = useTalentContext();\r\n\r\n    // TODO: all these getters are potentially costly & redundant\r\n    const pointsLeft = getPointsLeft(state);\r\n    const talentData = getTalentData(data, tree, name);\r\n    const prereqData = talentData.prereq\r\n      ? getTalentData(data, tree, talentData.prereq)\r\n      : null;\r\n    const rank = getTalentRank(state, tree, name);\r\n    const reqPointsMet = areReqPointsMet(state, data, tree, name);\r\n    const prereqMet = isPrereqMet(state, data, tree, name);\r\n    const unlocked = isTalentUnlocked(state, data, tree, name);\r\n\r\n    return (\r\n      <Tooltip ref={ref} contentClassName=\"TalentTooltip-content\" {...rest}>\r\n        <h1 className=\"TalentTooltip-title\">{name}</h1>\r\n        <p className=\"TalentTooltip-rank\">\r\n          Rank {rank}/{talentData.maxRank}\r\n        </p>\r\n        {!reqPointsMet && (\r\n          <p className=\"TalentTooltip-error\">\r\n            Requires {talentData.reqPoints} points in {tree} Talents\r\n          </p>\r\n        )}\r\n        {prereqData && !prereqMet && (\r\n          <p className=\"TalentTooltip-error\">\r\n            Requires {prereqData.maxRank} point\r\n            {prereqData.maxRank > 1 ? \"s\" : \"\"} in {prereqData.name}\r\n          </p>\r\n        )}\r\n        <p className=\"TalentTooltip-description\">\r\n          {rank === 0\r\n            ? talentData.description(rank + 1)\r\n            : talentData.description(rank)}\r\n        </p>\r\n        {rank !== 0 && rank < talentData.maxRank && (\r\n          <>\r\n            <br />\r\n            <p>Next rank:</p>\r\n            <p className=\"TalentTooltip-description\">\r\n              {talentData.description(rank + 1)}\r\n            </p>\r\n          </>\r\n        )}\r\n        {rank > 0 && (\r\n          <p className=\"TalentTooltip-error\">Right-click to unlearn</p>\r\n        )}\r\n        {unlocked && rank === 0 && pointsLeft > 0 && (\r\n          <p className=\"TalentTooltip-clickToLearn\">Click to learn</p>\r\n        )}\r\n      </Tooltip>\r\n    );\r\n  },\r\n);\r\n","import React from \"react\";\r\n\r\nimport \"./Arrow.css\";\r\nimport arrowLeft from \"../assets/arrows/left.png\";\r\nimport arrowLeftGold from \"../assets/arrows/left--gold.png\";\r\nimport arrowRight from \"../assets/arrows/right.png\";\r\nimport arrowRightGold from \"../assets/arrows/right--gold.png\";\r\nimport arrowDown from \"../assets/arrows/down.png\";\r\nimport arrowDownGold from \"../assets/arrows/down--gold.png\";\r\nimport arrowRightDown from \"../assets/arrows/right-down.png\";\r\nimport arrowRightDownGold from \"../assets/arrows/right-down--gold.png\";\r\n\r\nimport { Position, ArrowDir } from \"../TalentContext\";\r\n\r\nconst imageMap = {\r\n  left: arrowLeft,\r\n  \"left--gold\": arrowLeftGold,\r\n  right: arrowRight,\r\n  \"right--gold\": arrowRightGold,\r\n  down: arrowDown,\r\n  \"down--gold\": arrowDownGold,\r\n  \"right-down\": arrowRightDown,\r\n  \"right-down--gold\": arrowRightDownGold,\r\n  \"right-down-down\": arrowDown,\r\n  \"right-down-down--gold\": arrowDownGold,\r\n};\r\n\r\ninterface Props {\r\n  dir: ArrowDir;\r\n  from: Position;\r\n  to: Position;\r\n  active: boolean;\r\n}\r\n\r\nexport const Arrow: React.FC<Props> = ({ dir, from, to, active }) => {\r\n  const arrowType = `${dir}${active ? \"--gold\" : \"\"}` as keyof typeof imageMap;\r\n\r\n  return (\r\n    <div\r\n      className={`Arrow-container Arrow-container--${dir}`}\r\n      style={{ gridArea: `${from} / ${from} / ${to} / ${to}` }}\r\n    >\r\n      <div\r\n        className={`Arrow Arrow--${dir}`}\r\n        style={{\r\n          backgroundImage: `url(${imageMap[arrowType]})`,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Talent.css\";\r\nimport talentBubble from \"../assets/talent-bubble.png\";\r\nimport { useTooltipPos } from \"../hooks/useTooltipPos\";\r\nimport { useTreeContext } from \"../TreeContext\";\r\nimport { useTalentContext } from \"../TalentContext\";\r\nimport { TalentTooltip } from \"./TalentTooltip\";\r\nimport { SquareButton } from \"./SquareButton\";\r\nimport { Arrow } from \"./Arrow\";\r\nimport {\r\n  getTalentRank,\r\n  isTalentMaxed,\r\n  isTalentUnlocked,\r\n  getPointsLeft,\r\n  getTalentData,\r\n} from \"../TalentContext/selectors\";\r\n\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nexport const Talent: React.FC<Props> = ({ name }) => {\r\n  const tree = useTreeContext();\r\n  const { state, data, spendPoint, unspendPoint } = useTalentContext();\r\n\r\n  const { pos, icon, arrows } = getTalentData(data, tree, name);\r\n  const pointsLeft = getPointsLeft(state);\r\n  const rank = getTalentRank(state, tree, name);\r\n  const maxed = isTalentMaxed(state, data, tree, name);\r\n  const unlocked = isTalentUnlocked(state, data, tree, name);\r\n\r\n  const { anchorProps, tooltipProps, tooltipVisible } = useTooltipPos<\r\n    HTMLButtonElement,\r\n    HTMLDivElement\r\n  >(rank);\r\n\r\n  // TODO: too many edge cases here, hard to digest\r\n  // move to a selector?\r\n  const talentState = (() => {\r\n    if (pointsLeft < 1 && rank === 0) {\r\n      return \"locked\";\r\n    }\r\n    if (maxed) {\r\n      return \"maxed\";\r\n    }\r\n    if (unlocked) {\r\n      return \"unlocked\";\r\n    }\r\n    return \"locked\";\r\n  })();\r\n\r\n  const outlineColor = (() => {\r\n    if (talentState === \"unlocked\") {\r\n      return \"green\";\r\n    }\r\n    if (talentState === \"maxed\") {\r\n      return \"gold\";\r\n    }\r\n    return \"grey\";\r\n  })();\r\n\r\n  return (\r\n    <>\r\n      {arrows &&\r\n        arrows.map((arrow, i) => (\r\n          <Arrow key={i} active={unlocked} {...arrow} />\r\n        ))}\r\n      <div className=\"Talent-container\" style={{ gridArea: pos }}>\r\n        <SquareButton\r\n          onClick={() => spendPoint(tree, name)}\r\n          onRightClick={() => unspendPoint(tree, name)}\r\n          icon={icon}\r\n          disabled={talentState === \"locked\"}\r\n          outline={outlineColor}\r\n          {...anchorProps}\r\n        />\r\n        {talentState !== \"locked\" && (\r\n          <div\r\n            className={`Talent-pointCount Talent-pointCount--${outlineColor}`}\r\n            style={{ backgroundImage: `url(${talentBubble})` }}\r\n          >\r\n            {rank}\r\n          </div>\r\n        )}\r\n        {tooltipVisible && (\r\n          <TalentTooltip name={name} tree={tree} {...tooltipProps} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./ClearButton.css\";\r\nimport crossImage from \"../assets/cross.gif\";\r\n\r\ninterface Props {\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ClearButton: React.FC<Props> = ({ children, ...rest }) => {\r\n  return (\r\n    <button className=\"ClearButton\" {...rest}>\r\n      {children && <span className=\"ClearButton-label\">{children}</span>}\r\n      <div\r\n        className=\"ClearButton-icon\"\r\n        style={{ backgroundImage: `url(${crossImage})` }}\r\n      />\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./TalentTree.css\";\r\nimport { TreeContext } from \"../TreeContext\";\r\nimport { useTalentContext } from \"../TalentContext\";\r\nimport { Talent } from \"./Talent\";\r\nimport { SquareButton } from \"./SquareButton\";\r\nimport { ClearButton } from \"./ClearButton\";\r\nimport { getTreePointsSpent, getTreeData } from \"../TalentContext/selectors\";\r\n\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nexport const TalentTree: React.FC<Props> = ({ name, children }) => {\r\n  const { state, data, resetTree } = useTalentContext();\r\n  const pointsSpent = getTreePointsSpent(state, name);\r\n  const treeData = getTreeData(data, name);\r\n\r\n  return (\r\n    <TreeContext.Provider value={name}>\r\n      <div className=\"TalentTree\">\r\n        <header className=\"TalentTree-header\">\r\n          <SquareButton className=\"TalentTree-icon\" icon={treeData.icon} />\r\n          <div style={{ flex: 1 }}>\r\n            <h2 className=\"TalentTree-name\" style={{ flex: 1 }}>\r\n              {name}\r\n            </h2>\r\n            <p className=\"TalentTree-pointsSpent\">\r\n              Points spent: {pointsSpent}\r\n            </p>\r\n          </div>\r\n          <ClearButton onClick={() => resetTree(name)} />\r\n        </header>\r\n        <div\r\n          className=\"TalentTree-grid\"\r\n          style={{ backgroundImage: `url(${treeData.background})` }}\r\n        >\r\n          {Object.keys(treeData.talents).map(talentName => (\r\n            <Talent key={talentName} name={talentName} />\r\n          ))}\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </TreeContext.Provider>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { withRouter, matchPath, RouteComponentProps } from \"react-router-dom\";\r\n\r\nimport \"./KlassTrees.css\";\r\nimport { config } from \"../config\";\r\nimport {\r\n  useTalentContext,\r\n  getPointsLeft,\r\n  getTreePointsSpent,\r\n  getStateFromHash,\r\n  getHashFromState,\r\n} from \"../TalentContext\";\r\nimport { TalentTree } from \"../components/TalentTree\";\r\nimport { ClearButton } from \"../components/ClearButton\";\r\n\r\ninterface Props extends RouteComponentProps {\r\n  klass: string;\r\n}\r\n\r\nexport const KlassTrees = withRouter<Props, React.FC<Props>>(\r\n  ({ klass, location, history }) => {\r\n    const { state, data, resetAll, restoreState } = useTalentContext();\r\n\r\n    const pointsLeft = getPointsLeft(state);\r\n    const treeNames = Object.keys(data);\r\n    const treePointsSpent = treeNames\r\n      .map(treeName => getTreePointsSpent(state, treeName))\r\n      .join(\"/\");\r\n\r\n    const requiredLevel =\r\n      config.TOTAL_POINTS - pointsLeft + config.FIRST_POINT_LEVEL - 1;\r\n\r\n    // TODO: move this into a hook?\r\n    useEffect(() => {\r\n      const match = matchPath<{ skills: string }>(location.pathname, {\r\n        path: \"/:klass/:skills\",\r\n      });\r\n      const hash = match && match.params && match.params.skills;\r\n      if (hash) {\r\n        restoreState(getStateFromHash(data, hash));\r\n      }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      const match = matchPath<{ klass: string }>(location.pathname, {\r\n        path: \"/:klass\",\r\n      });\r\n      const klass = match && match.params && match.params.klass;\r\n      const skillHash = getHashFromState(state);\r\n      if (skillHash) {\r\n        history.replace(`/${klass}/${skillHash}`);\r\n      } else {\r\n        history.replace(`/${klass}`);\r\n      }\r\n    }, [state]);\r\n\r\n    return (\r\n      <div className=\"KlassTrees-container\">\r\n        <div className=\"KlassTrees\">\r\n          <div className=\"KlassTrees-header\">\r\n            <div className=\"KlassTrees-titleArea\">\r\n              <h1>\r\n                {klass} {treePointsSpent}\r\n              </h1>\r\n              <p className=\"KlassTrees-summary\">\r\n                Required level: {requiredLevel >= 10 ? requiredLevel : \"-\"}\r\n              </p>\r\n              <p className=\"KlassTrees-summary\">Points left: {pointsLeft}</p>\r\n            </div>\r\n            <ClearButton onClick={() => resetAll()}>Clear all</ClearButton>\r\n          </div>\r\n          <div className=\"KlassTrees-list\">\r\n            {treeNames.map(name => (\r\n              <TalentTree key={name} name={name} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["TalentContext","createContext","createTalentProvider","data","initialState","Object","entries","reduce","prev","_ref","treeName","tree","keys","talents","talentName","createInitialState","_ref2","children","state","dispatch","useReducer","action","type","talent","newState","makeReducer","value","spendPoint","pointsLeft","getPointsLeft","unlocked","isTalentUnlocked","maxed","isTalentMaxed","unspendPoint","rank","getTalentRank","getTalentDependents","length","resetTree","resetAll","restoreState","React","Provider","useTalentContext","context","useContext","Error","getStateFromHash","hashes","arguments","undefined","split","i","treeData","talentNames","hash","ranks","decodeState","name","getTreeStateFromHash","getHashFromState","values","treeHash","encodeState","push","trimEnd","join","getTalentData","getTreeTalents","getTreeData","getTreePointsSpent","config","getPointsSpent","maxRank","areReqPointsMet","reqPoints","isPrereqMet","talentData","prereq","prereqMet","reqPointsMet","basePoints","getBasePoints","treeTalents","TOTAL_POINTS","FIRST_POINT_LEVEL","TreeContext","DEFAULT_POS","Tooltip","ref","position","contentClassName","className","concat","style","backgroundImage","tooltipBackground","TalentTooltip","rest","prereqData","assign","description","imageMap","left","right","down","arrowDown","arrowDownGold","Arrow","dir","from","to","active","arrowType","gridArea","Talent","useTreeContext","pos","icon","arrows","anchorProps","tooltipProps","tooltipVisible","anchorRef","useRef","tooltipRef","tooltipPos","setTooltipPos","useState","setTooltipVisible","_len","deps","Array","_key","useLayoutEffect","current","getPosition","viewportHeight","window","innerHeight","viewportWidth","innerWidth","anchorRect","getBoundingClientRect","tooltipRect","fitsTop","top","height","fitsRight","width","fitsBottom","bottom","fitsLeft","onMouseEnter","showTooltip","onMouseLeave","hideTooltip","useTooltipPos","talentState","outlineColor","map","arrow","key","SquareButton","onClick","onRightClick","disabled","outline","ClearButton","TalentTree","pointsSpent","flex","background","KlassTrees","withRouter","klass","location","history","treeNames","treePointsSpent","requiredLevel","useEffect","match","matchPath","pathname","path","params","skills","skillHash","replace","_taggedTemplateLiteral","strings","raw","slice","freeze","defineProperties"],"sourceRoot":""}